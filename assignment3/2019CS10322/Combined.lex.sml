(*#line 58.10 "Combined.lex"*)functor CheckLexFun(structure Tokens:Check_TOKENS)(*#line 1.1 "Combined.lex.sml"*)
=
   struct
    structure UserDeclarations =
      struct
(*#line 1.1 "Combined.lex"*)structure Tokens= Tokens
  
  type pos = int
  type svalue = Tokens.svalue
  type ('a,'b) token = ('a,'b) Tokens.token  
  type lexresult = (svalue, pos) token

val iserror = ref 0
val lin = ref 1;
val col = ref 0;
val eolpos = ref 0;
val ls = ref [""]
val eof = fn () => (Tokens.EOF(!lin, !col))
val tokens_disp = fn () => !ls

val error = fn (x,lin,col) => TextIO.output(TextIO.stdOut,
							("Unknown Token:" ^ (Int.toString(lin))^":"^(Int.toString(col))^": "^x^"\n"));

fun revfold _ nil b = b
| revfold f (hd::tl) b = revfold f tl (f(hd,b))

  
  val keywords =
  [
   ("AND",  Tokens.AND),
   ("OR",  Tokens.OR),
   ("XOR",  Tokens.XOR),
   ("NOT",  Tokens.NOT),
   ("NEGATE",  Tokens.NEGATE),
   ("PLUS",  Tokens.PLUS),
   ("MINUS",  Tokens.MINUS),
   ("TIMES",  Tokens.TIMES),
   ("IMPLIES",  Tokens.IMPLIES),
   ("EQUALS",  Tokens.EQUALS),
   ("GREATERTHAN",  Tokens.GREATERTHAN),
   ("LESSTHAN",  Tokens.LESSTHAN),
   ("let",  Tokens.LET),
   ("in",  Tokens.IN),
   ("end",  Tokens.END),
   ("fn",  Tokens.FN),
   ("fun",  Tokens.FUN),
   ("if",  Tokens.IF),
   ("then",  Tokens.THEN),
   ("else",  Tokens.ELSE),
   ("fi",  Tokens.FI),
   ("int",Tokens.INT),
   ("bool",Tokens.BOOL)
   ]

  fun findKeywords (str:string, pos1:pos, pos2:pos) =
  case List.find (fn (s, _) => s = str )  keywords of 
  SOME (_, tk) => (ls := str :: !ls ; tk(str,pos1, pos2))
  | NONE => (ls := "ID" :: !ls ; Tokens.ID (str, pos1, pos2))



(*#line 62.1 "Combined.lex.sml"*)
end (* end of user routines *)
exception LexError (* raised if illegal leaf action tried *)
structure Internal =
	struct

datatype yyfinstate = N of int
type statedata = {fin : yyfinstate list, trans: string}
(* transition & final state table *)
val tab = let
val s = [ 
 (0, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (1, 
"\003\003\003\003\003\003\003\003\003\026\030\003\003\028\003\003\
\\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\
\\026\003\003\003\003\003\003\003\025\024\003\003\003\022\003\003\
\\020\020\020\020\020\020\020\020\020\020\019\018\003\016\003\003\
\\003\004\004\004\004\004\011\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\007\004\004\004\004\004\004\003\003\003\003\003\
\\003\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\003\003\003\003\003\
\\003"
),
 (4, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\000\
\\000\005\005\005\005\005\005\005\005\005\005\005\005\005\005\005\
\\005\005\005\005\005\005\005\005\005\005\005\000\000\000\000\000\
\\000\005\005\005\005\005\005\005\005\005\005\005\005\005\005\005\
\\005\005\005\005\005\005\005\005\005\005\005\000\000\000\000\000\
\\000"
),
 (6, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (7, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\000\
\\000\005\005\005\005\005\005\005\005\005\005\005\005\005\005\005\
\\005\005\008\005\005\005\005\005\005\005\005\000\000\000\000\000\
\\000\005\005\005\005\005\005\005\005\005\005\005\005\005\005\005\
\\005\005\005\005\005\005\005\005\005\005\005\000\000\000\000\000\
\\000"
),
 (8, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\000\
\\000\005\005\005\005\005\005\005\005\005\005\005\005\005\005\005\
\\005\005\005\005\005\009\005\005\005\005\005\000\000\000\000\000\
\\000\005\005\005\005\005\005\005\005\005\005\005\005\005\005\005\
\\005\005\005\005\005\005\005\005\005\005\005\000\000\000\000\000\
\\000"
),
 (9, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\000\
\\000\005\005\005\005\010\005\005\005\005\005\005\005\005\005\005\
\\005\005\005\005\005\005\005\005\005\005\005\000\000\000\000\000\
\\000\005\005\005\005\005\005\005\005\005\005\005\005\005\005\005\
\\005\005\005\005\005\005\005\005\005\005\005\000\000\000\000\000\
\\000"
),
 (11, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\000\
\\000\012\005\005\005\005\005\005\005\005\005\005\005\005\005\005\
\\005\005\005\005\005\005\005\005\005\005\005\000\000\000\000\000\
\\000\005\005\005\005\005\005\005\005\005\005\005\005\005\005\005\
\\005\005\005\005\005\005\005\005\005\005\005\000\000\000\000\000\
\\000"
),
 (12, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\000\
\\000\005\005\005\005\005\005\005\005\005\005\005\013\005\005\005\
\\005\005\005\005\005\005\005\005\005\005\005\000\000\000\000\000\
\\000\005\005\005\005\005\005\005\005\005\005\005\005\005\005\005\
\\005\005\005\005\005\005\005\005\005\005\005\000\000\000\000\000\
\\000"
),
 (13, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\000\
\\000\005\005\005\005\005\005\005\005\005\005\005\005\005\005\005\
\\005\005\005\014\005\005\005\005\005\005\005\000\000\000\000\000\
\\000\005\005\005\005\005\005\005\005\005\005\005\005\005\005\005\
\\005\005\005\005\005\005\005\005\005\005\005\000\000\000\000\000\
\\000"
),
 (14, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\006\006\006\006\006\006\006\006\006\006\000\000\000\000\000\000\
\\000\005\005\005\005\015\005\005\005\005\005\005\005\005\005\005\
\\005\005\005\005\005\005\005\005\005\005\005\000\000\000\000\000\
\\000\005\005\005\005\005\005\005\005\005\005\005\005\005\005\005\
\\005\005\005\005\005\005\005\005\005\005\005\000\000\000\000\000\
\\000"
),
 (16, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (20, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\021\021\021\021\021\021\021\021\021\021\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (22, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\023\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (26, 
"\000\000\000\000\000\000\000\000\000\027\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (28, 
"\000\000\000\000\000\000\000\000\000\000\029\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
(0, "")]
fun f x = x 
val s = List.map f (List.rev (tl (List.rev s))) 
exception LexHackingError 
fun look ((j,x)::r, i: int) = if i = j then x else look(r, i) 
  | look ([], i) = raise LexHackingError
fun g {fin=x, trans=i} = {fin=x, trans=look(s,i)} 
in Vector.fromList(List.map g 
[{fin = [], trans = 0},
{fin = [], trans = 1},
{fin = [], trans = 1},
{fin = [(N 43)], trans = 0},
{fin = [(N 41),(N 43)], trans = 4},
{fin = [(N 41)], trans = 4},
{fin = [(N 41)], trans = 6},
{fin = [(N 41),(N 43)], trans = 7},
{fin = [(N 41)], trans = 8},
{fin = [(N 41)], trans = 9},
{fin = [(N 31),(N 41)], trans = 4},
{fin = [(N 41),(N 43)], trans = 11},
{fin = [(N 41)], trans = 12},
{fin = [(N 41)], trans = 13},
{fin = [(N 41)], trans = 14},
{fin = [(N 37),(N 41)], trans = 4},
{fin = [(N 18),(N 43)], trans = 16},
{fin = [(N 21)], trans = 0},
{fin = [(N 12),(N 43)], trans = 0},
{fin = [(N 26),(N 43)], trans = 0},
{fin = [(N 10),(N 43)], trans = 20},
{fin = [(N 10)], trans = 20},
{fin = [(N 43)], trans = 22},
{fin = [(N 24)], trans = 0},
{fin = [(N 16),(N 43)], trans = 0},
{fin = [(N 14),(N 43)], trans = 0},
{fin = [(N 7),(N 43)], trans = 26},
{fin = [(N 7)], trans = 26},
{fin = [(N 43)], trans = 28},
{fin = [(N 4)], trans = 0},
{fin = [(N 1)], trans = 0}])
end
structure StartStates =
	struct
	datatype yystartstate = STARTSTATE of int

(* start state definitions *)

val INITIAL = STARTSTATE 1;

end
type result = UserDeclarations.lexresult
	exception LexerError (* raised if illegal leaf action tried *)
end

structure YYPosInt : INTEGER = Int
fun makeLexer yyinput =
let	val yygone0= YYPosInt.fromInt ~1
	val yyb = ref "\n" 		(* buffer *)
	val yybl = ref 1		(*buffer length *)
	val yybufpos = ref 1		(* location of next character to use *)
	val yygone = ref yygone0	(* position in file of beginning of buffer *)
	val yydone = ref false		(* eof found yet? *)
	val yybegin = ref 1		(*Current 'start state' for lexer *)

	val YYBEGIN = fn (Internal.StartStates.STARTSTATE x) =>
		 yybegin := x

fun lex () : Internal.result =
let fun continue() = lex() in
  let fun scan (s,AcceptingLeaves : Internal.yyfinstate list list,l,i0) =
	let fun action (i,nil) = raise LexError
	| action (i,nil::l) = action (i-1,l)
	| action (i,(node::acts)::l) =
		case node of
		    Internal.N yyk => 
			(let fun yymktext() = String.substring(!yyb,i0,i-i0)
			     val yypos = YYPosInt.+(YYPosInt.fromInt i0, !yygone)
			open UserDeclarations Internal.StartStates
 in (yybufpos := i; case yyk of 

			(* Application actions *)

  1 => ((*#line 66.14 "Combined.lex"*)lin:=(!lin)+1; col:=0 ;lex() (*#line 330.1 "Combined.lex.sml"*)
)
| 10 => let val yytext=yymktext() in (*#line 69.14 "Combined.lex"*)Tokens.NUM
	     (List.foldl (fn (a,r) => ord(a) - ord(#"0") + 10*r) 0 (explode yytext),
	      !lin,!col)(*#line 334.1 "Combined.lex.sml"*)
 end
| 12 => let val yytext=yymktext() in (*#line 73.14 "Combined.lex"*)col:= !col + size yytext;  ls := ";":: !ls    ;  Tokens.TERM(";",!lin,!col)(*#line 336.1 "Combined.lex.sml"*)
 end
| 14 => let val yytext=yymktext() in (*#line 74.14 "Combined.lex"*)col:= !col + size yytext;  ls := "(":: !ls    ;  Tokens.LPAREN("(",!lin,!col)(*#line 338.1 "Combined.lex.sml"*)
 end
| 16 => let val yytext=yymktext() in (*#line 75.14 "Combined.lex"*)col:= !col + size yytext;  ls := ")":: !ls    ;  Tokens.RPAREN(")",!lin,!col)(*#line 340.1 "Combined.lex.sml"*)
 end
| 18 => let val yytext=yymktext() in (*#line 76.14 "Combined.lex"*)col:= !col + size yytext;  ls := "=":: !ls    ;  Tokens.EQ("=",!lin,!col)(*#line 342.1 "Combined.lex.sml"*)
 end
| 21 => let val yytext=yymktext() in (*#line 77.14 "Combined.lex"*)col:= !col + size yytext;  ls := "=>":: !ls    ;  Tokens.IMP("=>",!lin,!col)(*#line 344.1 "Combined.lex.sml"*)
 end
| 24 => let val yytext=yymktext() in (*#line 78.14 "Combined.lex"*)col:= !col + size yytext;  ls := "->":: !ls    ;  Tokens.ARROW("->",!lin,!col)(*#line 346.1 "Combined.lex.sml"*)
 end
| 26 => let val yytext=yymktext() in (*#line 79.14 "Combined.lex"*)col:= !col + size yytext;  ls := ":":: !ls    ;  Tokens.COLON(":",!lin,!col)(*#line 348.1 "Combined.lex.sml"*)
 end
| 31 => let val yytext=yymktext() in (*#line 80.14 "Combined.lex"*)col:= !col + size yytext;  ls := "CONST":: !ls ; Tokens.CONST(true,!lin,!col)(*#line 350.1 "Combined.lex.sml"*)
 end
| 37 => let val yytext=yymktext() in (*#line 81.14 "Combined.lex"*)col:= !col + size yytext;  ls := "CONST":: !ls ; Tokens.CONST(false,!lin,!col)(*#line 352.1 "Combined.lex.sml"*)
 end
| 4 => ((*#line 67.16 "Combined.lex"*)lin:=(!lin)+1; col:=0 ;lex() (*#line 354.1 "Combined.lex.sml"*)
)
| 41 => let val yytext=yymktext() in (*#line 82.22 "Combined.lex"*)col:= !col + size yytext;  findKeywords(yytext,!lin,!col) (*#line 356.1 "Combined.lex.sml"*)
 end
| 43 => let val yytext=yymktext() in (*#line 83.14 "Combined.lex"*)col:= !col + size yytext; ( iserror :=1 ; error(yytext,!lin,!col)); lex()(*#line 358.1 "Combined.lex.sml"*)
 end
| 7 => let val yytext=yymktext() in (*#line 68.14 "Combined.lex"*)col:= !col + size yytext; lex()(*#line 360.1 "Combined.lex.sml"*)
 end
| _ => raise Internal.LexerError

		) end )

	val {fin,trans} = Vector.sub(Internal.tab, s)
	val NewAcceptingLeaves = fin::AcceptingLeaves
	in if l = !yybl then
	     if trans = #trans(Vector.sub(Internal.tab,0))
	       then action(l,NewAcceptingLeaves
) else	    let val newchars= if !yydone then "" else yyinput 1024
	    in if (String.size newchars)=0
		  then (yydone := true;
		        if (l=i0) then UserDeclarations.eof ()
		                  else action(l,NewAcceptingLeaves))
		  else (if i0=l then yyb := newchars
		     else yyb := String.substring(!yyb,i0,l-i0)^newchars;
		     yygone := YYPosInt.+(!yygone, YYPosInt.fromInt i0);
		     yybl := String.size (!yyb);
		     scan (s,AcceptingLeaves,l-i0,0))
	    end
	  else let val NewChar = Char.ord(CharVector.sub(!yyb,l))
		val NewChar = if NewChar<128 then NewChar else 128
		val NewState = Char.ord(CharVector.sub(trans,NewChar))
		in if NewState=0 then action(l,NewAcceptingLeaves)
		else scan(NewState,NewAcceptingLeaves,l+1,i0)
	end
	end
(*
	val start= if String.substring(!yyb,!yybufpos-1,1)="\n"
then !yybegin+1 else !yybegin
*)
	in scan(!yybegin (* start *),nil,!yybufpos,!yybufpos)
    end
end
  in lex
  end
end
